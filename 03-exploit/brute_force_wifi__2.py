# scan nearby wifi networkck
# Select one or all wifi to hack 
# brute force wifi using multithreading
# be happy

from scapy.all import *
import os, sys, socket, argparse, signal
import pyfiglet # Change ASCII text to ASCII art font

# Check if the user is root
def check_root():
    if not os.getuid() == 0:
        print("You must run this script with root privileges.")
        exit(1)

# Function handled when user use Ctrl+C
def ctrl_c(signal, frame):
    print("-------------------------")
    print("Execution aborded by user")
    print("-------------------------")
    os.system("kill -9 ", str(os.getpid()))
    sys.exit(1)

# Function to exit ?
def script_exit(signal, frame):
    print("EXIT")
    sys.exit(1)

def parser():
    parser = argparse.ArgumentParser(description='scan then connect to wofi network')
    
    parser.add_argument('-i', dest='i', help='wireless interface (wlan0)', required=True)

    return parser.parse_args()

# Function to sniff the wireless packets using scapy
def sniffPackets(packet):
    print("sniffPackets functions : " , packet)
    print(packet[0].addr1)
    try:
        srcmac = packet[0].addr2
        dstmac = packet[0].addr1
        bssid = packet[0].addr3
    except:
        print("sniffPackets : Cannot read MAC address")
        print(str(packet).encode("hex"))
        sys.exc_clear()

    try:
        ssidSize = packet[0][Dot11Elt].len
        ssid = packet[0][Dot11Elt].info
    except:
        ssidSize = 0
        ssid = ""
        
    # tuto -> https://www.hackers-arise.com/post/wi-fi-hacking-creating-a-wi-fi-scanner-with-python-and-scapy
    # this part is to see if the sniffed packet are beacons frames (denoted by type = 0 and subtype = 8)
    if packet[0].type == 0:
        st = packet[0][Dot11].subtype
        if str(st) == "8" and ssid != "" and dstmac.lower() == "ff:ff:ff:ff:ff:ff":
            p = packet[Dot11Elt]
            cap = packet.sprintf("{Dot11Beacon:%Dot11Beacon.cap%}"
                    "{Dot11ProbeResp:%Dot11ProbeResp.cap%}").split('+')
            channel = None
            crypto = set()

# Function to track discovered SSID's
# It make certain that thre are not duplicating discovered SSID's in the display
def init_process():
    global ssid_list
    ssid_list = {}
    global s
    s = conf.L2socket(iface=newiface)

# This function place the wireless interface in monitor mode 
# (similar to proiscous mode in wired NIC), it allow the interface to "see" all Wifi traffic
def setup_monitor(iface):
    print("setting up sniffing options")
    os.system('ifconfig '+ iface +' down')
    try:
        os.system('iwconfig '+ iface +' mode monitor')
    except:
        print("Failed to setup your interface in monitor mode")
        sys.exit()
    os.system('ifconfig '+ iface +' up')
    return iface


# ------ Main Code Body Start -------
check_root()

parser()

# Create and print the banner
print(pyfiglet.figlet_format("hack wifi (beta)"))

if __name__ == "__main__":
    print("start")
    signal.signal(signal.SIGINT, ctrl_c)
    # usage()
    # print("sys.argv values : " + sys.argv)
    parameters = {sys.argv[1]:sys.argv[2]}
    if "mon" not in str(parameters["-i"]):
        newiface = setup_monitor(parameters["-i"])
    else:
        newiface = str(parameters["-i"])
    init_process() # Track discovered SSID's
    print("Starting Hackers Arise Wifi Sniffer")
    print("Sniffing on interface " + str(newiface) + "...\n")
    sniff(iface=newiface, prn=sniffPackets, store=0)


