# TODO 1 : Create a DB to store all 'internal' hashes -> sqlite 
#Â           - [Hash type 1 (ex : MD5)]
#               - [5 first characters]
#                   - [String] 
# TODO 2 : multi hash - unhash
#           - SHA256

import pyfiglet, argparse, hashlib
from pathlib import Path

# Banner 
print(pyfiglet.figlet_format('Hash cracker'))

# Function parser to set all arguments from shell 
def parser():
    parser = argparse.ArgumentParser(description='an unhash tools')
    
    parser.add_argument('-wordlist', dest='wordlist', help='location of a wordlist', required=True)
    parser.add_argument('-hash', dest='hash_input', help='Hash to be cracked', required=True)
    parser.add_argument('-hashtype', dest='hash_type', help="Supported now \n- MD5\n- SHA256", required=True)
    return parser.parse_args()

def readfile(path):
#    print('path --> ', path)
    file = Path(path)
    wordlists = file.open() #.readline()
    return wordlists

def decrypt_tmp(args):
#    print ('decrypt start with --> ', args)
    for line in readfile(args.wordlist):
        if args.hash_type == 'MD5':
            hash_ob = hashlib.md5(line.strip().encode())
        elif args.hash_type == 'SHA256':
            hash_ob = hashlib.sha256(line.strip().encode())
        hash_pass = hash_ob.hexdigest()
#        print('line -->' , line, '\nhash ob', hash_ob,'\nhash pass', hash_pass)
        if hash_pass == args.hash_input:
            print('Found cleartext : ', line.strip())
            return 

args = parser()
decrypt_tmp(args)




